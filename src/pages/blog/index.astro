---
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Hero from '../../components/Hero.astro';
import Footer from '../../components/Footer.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import Header from '../../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../../consts';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

// Get unique categories
const categories = ['all', 'essay', 'short-story', 'poem', 'article', 'review', 'thoughts'] as const;
type Category = typeof categories[number];

const categoryLabels: Record<Category, string> = {
  'all': 'All Posts',
  'essay': 'Essays',
  'short-story': 'Short Stories',
  'poem': 'Poems',
  'article': 'Articles',
  'review': 'Reviews',
  'thoughts': 'Thoughts'
};
---

<BaseLayout 
  title="Blog - Junkerri"
  description="Read Junkerri's blog featuring thoughts, stories, and creative explorations across various forms of expression. Essays, poems, and creative writing."
  image="/assets/blog-images/beatkerri-hero.jpg"
  type="website"
  tags={['blog', 'writing', 'essays', 'poems', 'creative writing', 'junkerri', 'thoughts']}
>
	<Header />
	<main class="blog-page min-h-screen">
		<!-- Hero Section with Cosmic Animations -->
		<Hero title="BLOG" subtitle="Thoughts, stories, and creative explorations across various forms of expression." minHeight={300} />

		<!-- Blog Content Section -->
		<section class="py-16">
			<div class="container mx-auto px-4">
				<!-- Category Filter -->
				<div class="mb-16 text-center">
					<h2 class="text-2xl font-semibold mb-8 text-foreground">Browse by Category</h2>
					<div class="flex flex-wrap justify-center gap-4" id="category-filter">
            {categories.map((category) => (
              <button 
                class="category-filter px-6 py-3 rounded-full border border-input bg-background text-foreground text-sm font-medium transition-all duration-300 hover:!bg-primary hover:!text-black hover:!border-transparent hover:scale-105 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 data-[active=true]:bg-primary data-[active=true]:!text-black data-[active=true]:border-transparent data-[active=true]:scale-105"
                data-category={category}
              >
                {categoryLabels[category]}
              </button>
            ))}
					</div>
				</div>

				<!-- Blog Posts Grid -->
				<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" id="blog-posts">
					{
						posts.map((post) => (
							<article class="blog-card group hover:shadow-xl transition-all duration-300 rounded-xl overflow-hidden border border-border bg-card" data-category={post.data.category}>
								<a href={`/blog/${post.id}/`} class="block h-full">
									{post.data.heroImage && (
										<div class="image-container overflow-hidden">
											<Image 
												src={post.data.heroImage} 
												alt={post.data.title}
												width={400}
												height={250}
												class="w-full h-48 object-cover transition-transform duration-300 group-hover:scale-105"
											/>
										</div>
									)}
									<div class="p-6 h-full flex flex-col">
										<div class="flex items-center justify-between mb-4">
											<span class="category-badge px-3 py-1 rounded-full text-xs font-medium uppercase tracking-wider bg-cyberpunk-cyan/10 text-cyberpunk-cyan border border-cyberpunk-cyan/20">
												{post.data.category}
											</span>
											<time class="date text-sm text-muted-foreground">
												<FormattedDate date={post.data.pubDate} />
											</time>
										</div>
										<h3 class="title text-xl font-semibold mb-3 line-clamp-2 group-hover:text-primary transition-colors duration-200">
											{post.data.title}
										</h3>
										{post.data.description && (
											<p class="text-muted-foreground line-clamp-3 text-sm leading-relaxed flex-grow">
												{post.data.description}
											</p>
										)}
										<div class="mt-4 pt-4 border-t border-border">
											<span class="read-more text-sm font-medium text-primary group-hover:underline">
												Read more ‚Üí
											</span>
										</div>
									</div>
								</a>
							</article>
						))
					}
				</div>

				<!-- Empty State -->
				<div class="empty-state hidden text-center py-16" id="empty-state">
					<div class="max-w-md mx-auto">
						<div class="text-6xl mb-4">üìù</div>
						<h3 class="text-xl font-semibold mb-2 text-foreground">No posts found</h3>
						<p class="text-muted-foreground">Try selecting a different category or check back later for new content.</p>
					</div>
				</div>
			</div>
		</section>
	</main>
	<Footer />

	<script>
		// Enhanced category filtering functionality
		document.addEventListener('DOMContentLoaded', function() {
			const filterButtons = document.querySelectorAll<HTMLButtonElement>('.category-filter');
			const blogPosts = document.querySelectorAll<HTMLElement>('#blog-posts [data-category]');
			const emptyState = document.getElementById('empty-state');
			const blogPostsContainer = document.getElementById('blog-posts');

			function setActiveButton(active: HTMLButtonElement) {
				filterButtons.forEach(btn => {
					btn.removeAttribute('data-active');
					btn.classList.remove('scale-105');
				});
				active.setAttribute('data-active', 'true');
				active.classList.add('scale-105');
			}

			function applyFilter(category: string) {
				let visibleCount = 0;
				
				blogPosts.forEach((post) => {
					const isMatch = category === 'all' || post.getAttribute('data-category') === category;
					post.classList.toggle('hidden', !isMatch);
					
					if (isMatch) {
						visibleCount++;
						post.style.animation = 'fadeInUp 0.6s ease-out forwards';
					}
				});

				// Show/hide empty state
				if (emptyState && blogPostsContainer) {
					if (visibleCount === 0) {
						emptyState.classList.remove('hidden');
						blogPostsContainer.classList.add('hidden');
					} else {
						emptyState.classList.add('hidden');
						blogPostsContainer.classList.remove('hidden');
					}
				}

				// Persist selection in URL hash without adding history entries
				history.replaceState(null, '', `#${category}`);
			}

			filterButtons.forEach((button) => {
				button.addEventListener('click', () => {
					const category = button.getAttribute('data-category');
					if (!category) return;
					setActiveButton(button);
					applyFilter(category);
				});
			});

			// Initialize from URL hash if present
			const initial = (location.hash?.replace('#','') || 'all');
			const initialButton = Array.from(filterButtons).find(btn => btn.getAttribute('data-category') === initial) || Array.from(filterButtons).find(btn => btn.getAttribute('data-category') === 'all');
			if (initialButton) {
				setActiveButton(initialButton);
				applyFilter(initial);
			}
		});
	</script>

	<style>
		/* Enhanced animations and styles */
		@keyframes fadeInUp {
			from { 
				opacity: 0; 
				transform: translateY(30px); 
			}
			to { 
				opacity: 1; 
				transform: translateY(0); 
			}
		}

		/* Blog card enhancements */
		.blog-card {
			background: hsl(var(--card));
			border: 1px solid hsl(var(--border));
			transition: all 0.3s ease;
		}

		.blog-card:hover {
			transform: translateY(-8px);
			box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
		}

		/* Category filter enhancements */
		.category-filter {
			position: relative;
			overflow: hidden;
		}

		.category-filter::before {
			content: '';
			position: absolute;
			top: 0;
			left: -100%;
			width: 100%;
			height: 100%;
			background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
			transition: left 0.5s ease;
		}

		.category-filter:hover::before {
			left: 100%;
		}

		/* Image container enhancements */
		.image-container {
			position: relative;
		}

		.image-container::after {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: linear-gradient(to bottom, transparent 70%, rgba(0, 0, 0, 0.1));
			pointer-events: none;
		}

		/* Line clamp utilities */
		.line-clamp-2 {
			display: -webkit-box;
			-webkit-line-clamp: 2;
			-webkit-box-orient: vertical;
			overflow: hidden;
		}

		.line-clamp-3 {
			display: -webkit-box;
			-webkit-line-clamp: 3;
			-webkit-box-orient: vertical;
			overflow: hidden;
		}

		/* Responsive adjustments */
		@media (max-width: 768px) {
			.blog-card {
				margin-bottom: 1rem;
			}
			
			.category-filter {
				px: 4;
				py: 2;
				font-size: 0.875rem;
			}
		}
	</style>
</BaseLayout>
