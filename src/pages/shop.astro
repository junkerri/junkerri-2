---
export const prerender = false;

import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { STRIPE_PUBLIC_KEY } from 'astro:env/client';

// Define product type
interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  image: string;
  category: string;
  inStock: boolean;
  stripePriceId: string;
}

// Fetch products from API
let products: Product[] = [];
let categories: string[] = ["All"];

try {
  const response = await fetch(`${Astro.url.origin}/api/stripe/products`);
  if (response.ok) {
    const data = await response.json();
    if (data.success) {
      // Filter out products without prices and map the data safely
      products = data.products
        .filter((product: any) => product.default_price && product.default_price.unit_amount)
        .map((product: any): Product => ({
          id: product.id,
          name: product.name,
          description: product.description,
          price: product.default_price.unit_amount / 100, // Convert cents to dollars
          image: product.images?.[0] || "../assets/blog-images/blog-placeholder-1.jpg",
          category: product.metadata?.category || "Uncategorized",
          inStock: product.metadata?.inStock !== 'false', // Default to true unless explicitly set to false
          stripePriceId: product.default_price.id
        }));
      
      // Extract unique categories
      const uniqueCategories = [...new Set(products.map((p: Product) => p.category))];
      categories = ["All", ...uniqueCategories];
      
      console.log('üõçÔ∏è Products loaded from API:', products);
      console.log(`üìä Found ${products.length} products with valid prices out of ${data.products.length} total products`);
    }
  }
} catch (error) {
  console.error('‚ùå Error loading products:', error);
  // Fallback to empty products array
}
---

<BaseLayout title="Shop - Junkerri" description="Original artwork, prints, and merchandise">
  <Header />
  
  <main class="shop-page">
    <!-- Hero Section -->
    <section class="py-12 relative overflow-hidden cosmic-universe-background">
      <!-- Cosmic Background -->
      <div class="cosmic-bg"></div>
      
      <!-- Stars Layer -->
      <div class="stars-container">
        <div class="stars stars-1"></div>
        <div class="stars stars-2"></div>
        <div class="stars stars-3"></div>
      </div>
      
      <!-- Nebulae and Cosmic Clouds -->
      <div class="cosmic-nebulae">
        <div class="nebula nebula-1"></div>
        <div class="nebula nebula-2"></div>
        <div class="nebula nebula-3"></div>
      </div>
      
      <!-- Floating Space Geometry -->
      <div class="cosmic-geometry">
        <div class="cosmic-cube cosmic-cube-1"></div>
        <div class="cosmic-pyramid cosmic-pyramid-1"></div>
        <div class="cosmic-sphere cosmic-sphere-1"></div>
        <div class="cosmic-cube cosmic-cube-2"></div>
        <div class="cosmic-pyramid cosmic-pyramid-2"></div>
        <div class="cosmic-sphere cosmic-sphere-2"></div>
        <div class="cosmic-asteroid"></div>
        <div class="cosmic-satellite"></div>
        
        <!-- Additional geometric elements for more visual impact -->
        <div class="cosmic-cube" style="top: 25%; left: 15%; transform: rotate(60deg) scale(0.8); animation-delay: 2s;"></div>
        <div class="cosmic-pyramid" style="top: 75%; right: 25%; transform: scale(0.6); animation-delay: 1.5s;"></div>
        <div class="cosmic-sphere" style="top: 45%; left: 75%; transform: scale(0.7); animation-delay: 2.5s;"></div>
        <div class="cosmic-cube" style="bottom: 30%; right: 10%; transform: rotate(30deg) scale(0.5); animation-delay: 1s;"></div>
      </div>
      
      <!-- Cosmic Dust Particles -->
      <div class="cosmic-dust">
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
      </div>
      
      <!-- Shooting Stars -->
      <div class="shooting-stars">
        <div class="shooting-star"></div>
        <div class="shooting-star"></div>
        <div class="shooting-star"></div>
      </div>
      
      <!-- Mandela Art Circles -->
      <div class="mandela-orb mandela-orb-1" style="position: absolute; top: 20%; left: 20%; width: 100px; height: 100px; background: linear-gradient(135deg, #00ffb1, #e500ff, #5e00ff); border-radius: 50%; box-shadow: 0 0 20px rgba(0, 255, 177, 0.5); z-index: 5;"></div>
      <div class="mandela-orb mandela-orb-2" style="position: absolute; top: 60%; right: 20%; width: 150px; height: 150px; background: linear-gradient(135deg, #e500ff, #5e00ff, #00ffb1); border-radius: 50%; box-shadow: 0 0 20px rgba(229, 0, 255, 0.5); z-index: 5;"></div>
      <div class="mandela-orb mandela-orb-3" style="position: absolute; bottom: 20%; left: 60%; width: 80px; height: 80px; background: linear-gradient(135deg, #5e00ff, #00ffb1, #e500ff); border-radius: 50%; box-shadow: 0 0 20px rgba(94, 0, 255, 0.5); z-index: 5;"></div>
      <div class="mandela-orb mandela-orb-4" style="position: absolute; top: 40%; left: 50%; width: 120px; height: 120px; background: linear-gradient(135deg, #00ffb1, #e500ff, #5e00ff); border-radius: 50%; box-shadow: 0 0 20px rgba(0, 255, 177, 0.5); z-index: 5;"></div>
      
      <div class="absolute inset-0 bg-gradient-to-br from-cyberpunk-cyan/10 via-cyberpunk-pink/15 to-cyberpunk-purple/20"></div>
      <div class="container relative z-10">
        <div class="max-w-4xl mx-auto text-center">
          <h1 class="cosmic-title text-2xl sm:text-3xl md:text-5xl lg:text-6xl xl:text-7xl font-bold tracking-wider leading-tight">
            <span class="inline-block animate-cosmic-letter-float" style="animation-delay: 0s;">S</span>
            <span class="inline-block animate-cosmic-letter-float" style="animation-delay: 0.1s;">H</span>
            <span class="inline-block animate-cosmic-letter-float" style="animation-delay: 0.2s;">O</span>
            <span class="inline-block animate-cosmic-letter-float" style="animation-delay: 0.3s;">P</span>
          </h1>
        </div>
      </div>
    </section>

    <!-- Filters -->
    <section class="py-8">
      <div class="container">
        <div class="flex flex-wrap gap-4 justify-center">
          {categories.map((category) => (
            <button 
              class="px-6 py-2 rounded-full border border-input bg-background text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
              data-category={category}
            >
              {category}
            </button>
          ))}
        </div>
      </div>
    </section>

    <!-- Product Grid -->
    <section class="py-20">
      <div class="container">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {products.map((product) => (
            <div class="group overflow-hidden rounded-lg border bg-card text-card-foreground shadow-sm hover:shadow-lg transition-all duration-300 product-item" data-category={product.category}>
              <div class="aspect-square overflow-hidden relative">
                <img 
                  src={product.image} 
                  alt={product.name}
                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                />
                {!product.inStock && (
                  <div class="absolute inset-0 bg-black/50 flex items-center justify-center">
                    <span class="text-white font-semibold">Out of Stock</span>
                  </div>
                )}
              </div>
              <div class="p-6">
                <div class="flex items-center justify-between mb-2">
                  <span class="inline-flex items-center rounded-full bg-secondary px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2">
                    {product.category}
                  </span>
                  <span class="text-lg font-bold text-primary">${product.price}</span>
                </div>
                <h3 class="text-xl font-semibold leading-none tracking-tight mb-2">{product.name}</h3>
                <p class="text-sm text-muted-foreground mb-4">{product.description}</p>
                
                {product.inStock ? (
                  <button 
                    class="w-full inline-flex items-center justify-center rounded-md bg-primary text-primary-foreground px-4 py-2 text-sm font-medium transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
                    data-product-id={product.id}
                    data-stripe-price-id={product.stripePriceId}
                  >
                    Add to Cart
                    <svg class="ml-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"/>
                    </svg>
                  </button>
                ) : (
                  <button 
                    class="w-full inline-flex items-center justify-center rounded-md border border-input bg-background px-4 py-2 text-sm font-medium text-muted-foreground cursor-not-allowed"
                    disabled
                  >
                    Out of Stock
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>

    <!-- Shopping Cart Sidebar -->
    <div id="cart-sidebar" class="fixed top-0 right-0 h-full w-80 bg-background border-l shadow-lg transform translate-x-full transition-transform duration-300 z-50">
      <div class="p-6 h-full flex flex-col">
        <div class="flex items-center justify-between mb-6">
          <h3 class="text-lg font-semibold">Shopping Cart</h3>
          <button id="close-cart" class="text-muted-foreground hover:text-foreground">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
        
        <div id="cart-items" class="flex-1 overflow-y-auto space-y-4">
          <!-- Cart items will be populated by JavaScript -->
        </div>
        
        <div class="border-t pt-4 space-y-4">
          <div class="flex justify-between text-lg font-semibold">
            <span>Total:</span>
            <span id="cart-total">$0</span>
          </div>
          <button 
            id="checkout-btn"
            class="w-full inline-flex items-center justify-center rounded-md bg-primary text-primary-foreground px-4 py-3 text-sm font-medium transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
            disabled
          >
            Proceed to Checkout
          </button>
        </div>
      </div>
    </div>

    <!-- Cart Overlay -->
    <div id="cart-overlay" class="fixed inset-0 bg-black/50 z-40 hidden"></div>

    <!-- CTA Section -->
    <section class="py-20 bg-muted/30">
      <div class="container text-center">
        <h2 class="text-4xl font-bold mb-4">Custom Commissions</h2>
        <p class="text-xl mb-8 text-muted-foreground">Interested in a custom piece or bulk order?</p>
        <a href="/contact" class="inline-flex items-center justify-center rounded-md bg-primary text-primary-foreground px-8 py-3 text-lg font-medium transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2">
          Get in Touch
          <svg class="ml-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
          </svg>
        </a>
      </div>
    </section>
  </main>

  <Footer />

  <script>
    // Cart functionality
    interface CartItem {
      id: string;
      name: string;
      price: number;
      image: string;
      quantity: number;
    }

    let cart: CartItem[] = [];
    const cartSidebar = document.getElementById('cart-sidebar');
    const cartOverlay = document.getElementById('cart-overlay');
    const cartItems = document.getElementById('cart-items');
    const cartTotal = document.getElementById('cart-total');
    const checkoutBtn = document.getElementById('checkout-btn') as HTMLButtonElement;
    const closeCart = document.getElementById('close-cart');

    // Product data for cart - will be populated dynamically from Stripe data
    let productData: Record<string, { name: string; price: number; image: string }> = {};

    // Function to update product data when products are loaded
    function updateProductData() {
      const productElements = document.querySelectorAll('.product-item');
      productElements.forEach(element => {
        const productId = element.getAttribute('data-product-id');
        const productName = element.querySelector('h3')?.textContent;
        const productPrice = element.querySelector('.text-primary')?.textContent;
        const productImage = element.querySelector('img')?.getAttribute('src');
        
        if (productId && productName && productPrice && productImage) {
          const price = parseFloat(productPrice.replace('$', ''));
          productData[productId] = {
            name: productName,
            price: price,
            image: productImage
          };
        }
      });
      console.log('üõí Product data updated for cart:', productData);
    }

    // Add to cart functionality
    document.querySelectorAll('[data-product-id]').forEach(button => {
      button.addEventListener('click', () => {
        const productId = button.getAttribute('data-product-id');
        if (!productId) return;
        
        const product = productData[productId];
        if (!product) return;
        
        // Check if product is already in cart
        const existingItem = cart.find(item => item.id === productId);
        if (existingItem) {
          existingItem.quantity += 1;
        } else {
          cart.push({
            id: productId,
            name: product.name,
            price: product.price,
            image: product.image,
            quantity: 1
          });
        }
        
        updateCart();
        openCart();
      });
    });

    function updateCart() {
      if (!cartItems || !cartTotal || !checkoutBtn) return;
      
      // Update cart items display
      cartItems.innerHTML = cart.map(item => `
        <div class="flex items-center gap-4 p-4 border rounded-lg">
          <img src="${item.image}" alt="${item.name}" class="w-16 h-16 object-cover rounded" />
          <div class="flex-1">
            <h4 class="font-medium">${item.name}</h4>
            <p class="text-sm text-muted-foreground">$${item.price}</p>
          </div>
          <div class="flex items-center gap-2">
            <button class="text-muted-foreground hover:text-foreground" onclick="updateQuantity('${item.id}', -1)">-</button>
            <span class="w-8 text-center">${item.quantity}</span>
            <button class="text-muted-foreground hover:text-foreground" onclick="updateQuantity('${item.id}', 1)">+</button>
          </div>
        </div>
      `).join('');
      
      // Update total
      const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      cartTotal.textContent = `$${total}`;
      
      // Enable/disable checkout button
      checkoutBtn.disabled = cart.length === 0;
    }

    function updateQuantity(productId: string, change: number) {
      const item = cart.find(item => item.id === productId);
      if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
          cart = cart.filter(item => item.id !== productId);
        }
        updateCart();
      }
    }

    function openCart() {
      if (!cartSidebar || !cartOverlay) return;
      cartSidebar.classList.remove('translate-x-full');
      cartOverlay.classList.remove('hidden');
    }

    function closeCartSidebar() {
      if (!cartSidebar || !cartOverlay) return;
      cartSidebar.classList.add('translate-x-full');
      cartOverlay.classList.add('hidden');
    }

    // Event listeners
    if (closeCart) {
      closeCart.addEventListener('click', closeCartSidebar);
    }
    if (cartOverlay) {
      cartOverlay.addEventListener('click', closeCartSidebar);
    }

    // Checkout functionality (Stripe integration)
    if (checkoutBtn) {
      checkoutBtn.addEventListener('click', async () => {
        if (cart.length === 0) return;
        
        try {
          // Prepare items for Stripe checkout
          const checkoutItems = cart.map(item => ({
            price: item.id, // This should be the Stripe price ID
            quantity: item.quantity
          }));

          console.log('üõí Creating checkout session for:', checkoutItems);
          
          // Create checkout session
          const response = await fetch('/api/stripe/checkout', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ items: checkoutItems })
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();
          
          if (data.success && data.url) {
            console.log('‚úÖ Redirecting to Stripe checkout...');
            window.location.href = data.url;
          } else {
            throw new Error(data.error || 'Checkout failed');
          }
          
        } catch (error) {
          console.error('‚ùå Checkout error:', error);
          alert(`Checkout failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      });
    }

    // Filter functionality
    const filterButtons = document.querySelectorAll('[data-category]');
    const productItems = document.querySelectorAll('.product-item');

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const category = button.getAttribute('data-category');
        if (!category) return;
        
        // Update active button
        filterButtons.forEach(btn => btn.classList.remove('bg-primary', 'text-primary-foreground'));
        button.classList.add('bg-primary', 'text-primary-foreground');
        
        // Filter products
        productItems.forEach(item => {
          if (category === 'All' || item.getAttribute('data-category') === category) {
            (item as HTMLElement).style.display = 'block';
          } else {
            (item as HTMLElement).style.display = 'none';
          }
        });
      });
    });

    // Initialize product data for cart after page loads
    setTimeout(() => {
      updateProductData();
    }, 100);
  </script>
</BaseLayout>
