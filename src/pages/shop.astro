---
export const prerender = false;

import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { STRIPE_PUBLIC_KEY } from 'astro:env/client';

// Define product type
interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  image: string;
  category: string;
  inStock: boolean;
  stripePriceId: string;
}

// Fetch products from API
let products: Product[] = [];
let categories: string[] = ["All"];

try {
  const response = await fetch(`${Astro.url.origin}/api/stripe/products`);
  if (response.ok) {
    const data = await response.json();
    if (data.success) {
      console.log('üîç Raw products from Stripe:', data.products);
      console.log(`üì¶ Total products from Stripe: ${data.products.length}`);
      
      // Debug: Log each product individually
      data.products.forEach((product: any, index: number) => {
        console.log(`üîç Product ${index + 1}:`, {
          id: product.id,
          name: product.name,
          hasDefaultPrice: !!product.default_price,
          hasUnitAmount: !!product.default_price?.unit_amount,
          priceData: product.default_price,
          active: product.active,
          metadata: product.metadata
        });
      });
      
      // Filter out products without prices and map the data safely
      products = data.products
        .filter((product: any) => {
          const hasPrice = product.default_price && product.default_price.unit_amount;
          if (!hasPrice) {
            console.log(`‚ö†Ô∏è Product "${product.name}" filtered out - missing price data:`, {
              hasDefaultPrice: !!product.default_price,
              hasUnitAmount: !!product.default_price?.unit_amount,
              priceData: product.default_price
            });
          }
          return hasPrice;
        })
        .map((product: any): Product => {
          const mappedProduct = {
            id: product.id,
            name: product.name,
            description: product.description,
            price: product.default_price.unit_amount / 100, // Convert cents to dollars
            image: product.images?.[0] || "../assets/blog-images/blog-placeholder-1.jpg",
            category: product.metadata?.category || "Uncategorized",
            inStock: product.metadata?.inStock !== 'false', // Default to true unless explicitly set to false
            stripePriceId: product.default_price.id
          };
          console.log('üõçÔ∏è Mapped product:', mappedProduct);
          return mappedProduct;
        });
      
      // Extract unique categories
      const uniqueCategories = [...new Set(products.map((p: Product) => p.category))];
      categories = ["All", ...uniqueCategories];
      
      console.log('üõçÔ∏è Final products after filtering:', products);
      console.log(`üìä Found ${products.length} products with valid prices out of ${data.products.length} total products`);
    }
  }
} catch (error) {
  console.error('‚ùå Error loading products:', error);
  // Fallback to empty products array
}
---

<BaseLayout title="Shop - Junkerri" description="Original artwork, prints, and merchandise">
  <Header />
  
  <main class="shop-page">
    <!-- Hero Section -->
    <section class="py-12 relative overflow-hidden cosmic-universe-background">
      <!-- Cosmic Background -->
      <div class="cosmic-bg"></div>
      
      <!-- Stars Layer -->
      <div class="stars-container">
        <div class="stars stars-1"></div>
        <div class="stars stars-2"></div>
        <div class="stars stars-3"></div>
      </div>
      
      <!-- Nebulae and Cosmic Clouds -->
      <div class="cosmic-nebulae">
        <div class="nebula nebula-1"></div>
        <div class="nebula nebula-2"></div>
        <div class="nebula nebula-3"></div>
      </div>
      
      <!-- Floating Space Geometry -->
      <div class="cosmic-geometry">
        <div class="cosmic-cube cosmic-cube-1"></div>
        <div class="cosmic-pyramid cosmic-pyramid-1"></div>
        <div class="cosmic-sphere cosmic-sphere-1"></div>
        <div class="cosmic-cube cosmic-cube-2"></div>
        <div class="cosmic-pyramid cosmic-pyramid-2"></div>
        <div class="cosmic-sphere cosmic-sphere-2"></div>
        <div class="cosmic-asteroid"></div>
        <div class="cosmic-satellite"></div>
        
        <!-- Additional geometric elements for more visual impact -->
        <div class="cosmic-cube" style="top: 25%; left: 15%; transform: rotate(60deg) scale(0.8); animation-delay: 2s;"></div>
        <div class="cosmic-pyramid" style="top: 75%; right: 25%; transform: scale(0.6); animation-delay: 1.5s;"></div>
        <div class="cosmic-sphere" style="top: 45%; left: 75%; transform: scale(0.7); animation-delay: 2.5s;"></div>
        <div class="cosmic-cube" style="bottom: 30%; right: 10%; transform: rotate(30deg) scale(0.5); animation-delay: 1s;"></div>
      </div>
      
      <!-- Cosmic Dust Particles -->
      <div class="cosmic-dust">
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
        <div class="dust-particle"></div>
      </div>
      
      <!-- Shooting Stars -->
      <div class="shooting-stars">
        <div class="shooting-star"></div>
        <div class="shooting-star"></div>
        <div class="shooting-star"></div>
      </div>
      
      <!-- Mandela Art Circles -->
      <div class="mandela-orb mandela-orb-1" style="position: absolute; top: 20%; left: 20%; width: 100px; height: 100px; background: linear-gradient(135deg, #00ffb1, #e500ff, #5e00ff); border-radius: 50%; box-shadow: 0 0 20px rgba(0, 255, 177, 0.5); z-index: 5;"></div>
      <div class="mandela-orb mandela-orb-2" style="position: absolute; top: 60%; right: 20%; width: 150px; height: 150px; background: linear-gradient(135deg, #e500ff, #5e00ff, #00ffb1); border-radius: 50%; box-shadow: 0 0 20px rgba(229, 0, 255, 0.5); z-index: 5;"></div>
      <div class="mandela-orb mandela-orb-3" style="position: absolute; bottom: 20%; left: 60%; width: 80px; height: 80px; background: linear-gradient(135deg, #5e00ff, #00ffb1, #e500ff); border-radius: 50%; box-shadow: 0 0 20px rgba(94, 0, 255, 0.5); z-index: 5;"></div>
      <div class="mandela-orb mandela-orb-4" style="position: absolute; top: 40%; left: 50%; width: 120px; height: 120px; background: linear-gradient(135deg, #00ffb1, #e500ff, #5e00ff); border-radius: 50%; box-shadow: 0 0 20px rgba(0, 255, 177, 0.5); z-index: 5;"></div>
      
      <div class="absolute inset-0 bg-gradient-to-br from-cyberpunk-cyan/10 via-cyberpunk-pink/15 to-cyberpunk-purple/20"></div>
      <div class="container relative z-10">
        <div class="max-w-4xl mx-auto text-center">
          <h1 class="cosmic-title text-2xl sm:text-3xl md:text-5xl lg:text-6xl xl:text-7xl font-bold tracking-wider leading-tight">
            <span class="inline-block animate-cosmic-letter-float" style="animation-delay: 0s;">S</span>
            <span class="inline-block animate-cosmic-letter-float" style="animation-delay: 0.1s;">H</span>
            <span class="inline-block animate-cosmic-letter-float" style="animation-delay: 0.2s;">O</span>
            <span class="inline-block animate-cosmic-letter-float" style="animation-delay: 0.3s;">P</span>
          </h1>
        </div>
      </div>
    </section>

    <!-- Filters -->
    <section class="py-8">
      <div class="container">
        <div class="flex flex-wrap gap-4 justify-center">
          {categories.map((category) => (
            <button
              class="category-filter px-6 py-2 rounded-full border border-input bg-background text-foreground text-sm font-medium transition-colors hover:!bg-primary hover:!text-black hover:!border-transparent focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 data-[active=true]:bg-primary data-[active=true]:!text-black data-[active=true]:border-transparent"
              data-category={category}
            >
              {category}
            </button>
          ))}
        </div>
      </div>
    </section>

    <!-- Product Grid -->
    <section class="py-20">
      <div class="container">
        <!-- Shipping Notice -->
        <div class="mb-6 p-3 bg-muted/30 border-l-4 border-primary/50 rounded-r text-sm">
          <div class="flex items-center gap-2 text-muted-foreground">
            <svg class="w-4 h-4 text-primary flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            <span>
              <span class="font-medium">Shipping:</span> Standard $5 (3-7 days) ‚Ä¢ Free standard shipping on orders over $75 ‚Ä¢ Express $15 (1-3 days) ‚Ä¢ Address collected at checkout
            </span>
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {products.map((product) => (
            <div class="group overflow-hidden rounded-lg border bg-card text-white shadow-sm hover:shadow-lg transition-all duration-300 product-item [&_h3]:text-white [&_p]:text-white [&_span]:text-white focus:text-white active:text-white focus-within:text-white [&_*]:text-white" data-category={product.category}>
              <div class="aspect-square overflow-hidden relative">
                <img 
                  src={product.image} 
                  alt={product.name}
                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                />
                {!product.inStock && (
                  <div class="absolute inset-0 bg-black/50 flex items-center justify-center">
                    <span class="text-white font-semibold">Out of Stock</span>
                  </div>
                )}
              </div>
              <div class="p-6">
                <div class="flex items-center justify-between mb-2">
                  <span class="inline-flex items-center rounded-full bg-secondary px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2">
                    {product.category}
                  </span>
                  <span class="text-lg font-bold text-primary">${product.price}</span>
                </div>
                <h3 class="text-xl font-semibold leading-none tracking-tight mb-2 text-white">{product.name}</h3>
                <p class="text-sm text-muted-foreground mb-4 text-white">{product.description}</p>
                
                {/* Size Selection for Unearthly Delights */}
                {product.name === "Unearthly Delights" && (
                  <div class="mb-4">
                    <p class="text-sm text-muted-foreground mb-2">Select Size:</p>
                    <div class="flex gap-2">
                      <button
                        type="button"
                        class="size-btn px-3 py-1 text-sm border rounded-md transition-colors bg-primary text-white border-primary"
                        data-size="16x20"
                        data-price="70"
                        data-target-product={product.id}
                      >
                        16 x 20
                      </button>
                      <button
                        type="button"
                        class="size-btn px-3 py-1 text-sm border rounded-md transition-colors border-input bg-background text-white hover:bg-accent"
                        data-size="8x10"
                        data-price="35"
                        data-target-product={product.id}
                      >
                        8 x 10
                      </button>
                    </div>
                  </div>
                )}
                
                {product.inStock ? (
                  <div>
                    <button 
                      class="btn btn-primary btn-md w-full"
                      data-product-id={product.id}
                      data-price-id={product.stripePriceId}
                    >
                      Add to Cart
                      <svg class="ml-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"/>
                      </svg>
                    </button>
                    

                  </div>
                ) : (
                  <button 
                    class="btn btn-outline btn-md w-full cursor-not-allowed"
                    disabled
                  >
                    Out of Stock
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>

    <!-- Shopping Cart Sidebar -->
    <div id="cart-sidebar" class="fixed top-0 right-0 h-full w-80 bg-background border-l shadow-lg transform translate-x-full transition-transform duration-300 z-50">
      <div class="p-6 h-full flex flex-col">
        <div class="flex items-center justify-between mb-6">
          <h3 class="text-lg font-semibold">Shopping Cart</h3>
          <button id="close-cart" class="text-muted-foreground hover:text-foreground">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
        
        <div id="cart-items" class="flex-1 overflow-y-auto space-y-4">
          <!-- Cart items will be populated by JavaScript -->
        </div>
        
        <div class="border-t pt-4 space-y-4">
          <div class="flex justify-between text-lg font-semibold">
            <span>Total:</span>
            <span id="cart-total">$0</span>
          </div>
          
          <!-- Shipping Information -->
          <div class="text-sm text-muted-foreground space-y-2">
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
              </svg>
              <span id="standard-shipping-text">Standard Shipping: $5.00 (3-7 business days)</span>
            </div>
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
              </svg>
              <span>Express Shipping: $15.00 (1-3 business days)</span>
            </div>
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
              </svg>
              <span>Shipping address will be collected during checkout</span>
            </div>
          </div>
          
          <button 
            id="checkout-btn"
            class="w-full inline-flex items-center justify-center rounded-md bg-primary text-primary-foreground px-4 py-3 text-sm font-medium transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2"
            disabled
          >
            Proceed to Checkout
          </button>
        </div>
      </div>
    </div>

    <!-- Cart Overlay - No dark background -->
    <div id="cart-overlay" class="fixed inset-0 z-40 hidden"></div>

    <!-- CTA Section -->
    <section class="py-20 bg-muted/30">
      <div class="container text-center">
        <h2 class="text-4xl font-bold mb-4">Custom Commissions</h2>
        <p class="text-xl mb-8 text-muted-foreground">Interested in a custom piece or bulk order?</p>
        <a href="/contact" class="btn btn-secondary btn-lg">
          Get in Touch
          <svg class="ml-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
          </svg>
        </a>
      </div>
    </section>
  </main>

  <Footer />

  <style>
    /* Disable all click/focus effects on product cards */
    .product-item {
      outline: none !important;
      -webkit-tap-highlight-color: transparent !important;
    }
    
    .product-item:focus,
    .product-item:active,
    .product-item:focus-within {
      outline: none !important;
      -webkit-tap-highlight-color: transparent !important;
    }
    
    .product-item * {
      color: white !important;
    }
    
    .product-item h3,
    .product-item p,
    .product-item span {
      color: white !important;
    }
    
    /* Force Add to Cart button text to be black */
    .product-item button[data-product-id] {
      color: black !important;
      font-weight: 600 !important;
    }
    
    /* Force Add to Cart button icon to be black */
    .product-item button[data-product-id] svg {
      stroke: black !important;
    }
    
    /* Hover effect for Add to Cart button */
    .product-item button[data-product-id]:hover {
      background-color: hsl(var(--secondary)) !important; /* Same as category tags */
    }
    
    .product-item button[data-product-id]:hover svg {
      stroke: white !important;
    }

    /* Category filter active state (match Blog/Art) */
    .category-filter[data-active="true"] {
      background-color: hsl(var(--primary)) !important;
      color: #000 !important;
      border-color: transparent !important;
    }
  </style>

  <script>
    // Cart functionality
    interface CartItem {
      id: string; // Product ID for display
      priceId: string; // Stripe price ID for checkout
      name: string;
      price: number;
      image: string;
      quantity: number;
    }

    let cart: CartItem[] = [];
    const cartSidebar = document.getElementById('cart-sidebar');
    const cartOverlay = document.getElementById('cart-overlay');
    const cartItems = document.getElementById('cart-items');
    const cartTotal = document.getElementById('cart-total');
    const checkoutBtn = document.getElementById('checkout-btn') as HTMLButtonElement;
    const closeCart = document.getElementById('close-cart');

    // Cart persistence with localStorage
    const CART_STORAGE_KEY = 'junkerri-cart';
    
    // Load cart from localStorage
    function loadCart(): CartItem[] {
      try {
        const saved = localStorage.getItem(CART_STORAGE_KEY);
        return saved ? JSON.parse(saved) : [];
      } catch (error) {
        console.error('Failed to load cart from localStorage:', error);
        return [];
      }
    }
    
    // Save cart to localStorage
    function saveCart(cartData: CartItem[]) {
      try {
        localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(cartData));
      } catch (error) {
        console.error('Failed to save cart to localStorage:', error);
      }
    }
    
    // Initialize cart from localStorage
    cart = loadCart();
    console.log('üõí Cart loaded from storage:', cart);

    // Product data for cart - will be populated dynamically from Stripe data
    let productData: Record<string, { name: string; price: number; image: string; priceId: string }> = {};

    // Function to update product data when products are loaded
    function updateProductData() {
      console.log('üõí Starting to update product data...');
      
      // Look for buttons with data-product-id instead of product-item containers
      const productButtons = document.querySelectorAll('[data-product-id]');
      console.log(`üõí Found ${productButtons.length} product buttons`);
      
      productButtons.forEach(button => {
        const productId = button.getAttribute('data-product-id');
        const productPriceId = button.getAttribute('data-price-id');
        
        // Find the parent product-item container
        const productContainer = button.closest('.product-item');
        if (!productContainer) {
          console.warn('No product container found for button:', productId);
          return;
        }
        
        const productName = productContainer.querySelector('h3')?.textContent;
        const productPrice = productContainer.querySelector('.text-primary')?.textContent;
        const productImage = productContainer.querySelector('img')?.getAttribute('src');
        
        console.log('üõí Processing product:', { productId, productName, productPrice, productImage, productPriceId });
        
        if (productId && productName && productPrice && productImage && productPriceId) {
          const price = parseFloat(productPrice.replace('$', ''));
          productData[productId] = {
            name: productName,
            price: price,
            image: productImage,
            priceId: productPriceId
          };
          console.log(`‚úÖ Added product data for ${productId}:`, productData[productId]);
        } else {
          console.warn('Missing data for product:', { productId, productName, productPrice, productImage, productPriceId });
        }
      });
      
      console.log('üõí Final product data for cart:', productData);
      
      // Update cart display after product data is loaded
      updateCart();
      
      // Set up cart event listeners AFTER products are loaded
      setupCartEventListeners();
    }

    // Add to cart functionality - moved to function so it runs after products load
    function setupCartEventListeners() {
      console.log('üîß Setting up cart event listeners...');
      
      document.querySelectorAll('[data-product-id]').forEach(button => {
        // Remove existing listeners to prevent duplicates
        button.removeEventListener('click', handleAddToCart);
        button.addEventListener('click', handleAddToCart);
      });
      
      console.log(`üîß Added event listeners to ${document.querySelectorAll('[data-product-id]').length} buttons`);
    }
    
    function handleAddToCart(event: Event) {
      const button = event.currentTarget as HTMLElement;
      const productId = button.getAttribute('data-product-id');
      if (!productId) {
        console.warn('No product ID found on button');
        return;
      }
      
      console.log('üõí Add to cart clicked for product:', productId);
      console.log('üõí Available product data:', productData);
      
      const product = productData[productId];
      if (!product) {
        console.warn('Product data not found for:', productId);
        showNotification('Product data not available. Please refresh the page.', 'error');
        return;
      }
      
      // Check if product is already in cart
      const existingItem = cart.find(item => item.id === productId);
      if (existingItem) {
        existingItem.quantity += 1;
        showNotification(`Updated quantity for ${product.name}`, 'success');
      } else {
        cart.push({
          id: productId,
          priceId: product.priceId,
          name: product.name,
          price: product.price,
          image: product.image,
          quantity: 1
        });
        showNotification(`Added ${product.name} to cart`, 'success');
      }
      
      updateCart();
      saveCart(cart);
      openCart();
    }

    function updateCart() {
      if (!cartItems || !cartTotal || !checkoutBtn) return;
      
      // Update cart items display
      cartItems.innerHTML = cart.map(item => `
        <div class="flex w-full items-center gap-3 p-4 border border-border rounded-lg bg-background/50" data-cart-item-id="${item.id}">
          <img src="${item.image}" alt="${item.name}" class="w-14 h-14 object-cover rounded shrink-0" />
          <div class="flex-1 min-w-0">
            <h4 class="font-medium truncate">${item.name}</h4>
            <p class="text-sm text-muted-foreground">$${item.price}</p>
          </div>
          <div class="flex items-center gap-2 shrink-0">
            <button class="quantity-btn-decrease text-muted-foreground hover:text-foreground p-1 rounded" data-product-id="${item.id}" aria-label="Decrease quantity">-</button>
            <span class="w-8 text-center">${item.quantity}</span>
            <button class="quantity-btn-increase text-muted-foreground hover:text-foreground p-1 rounded" data-product-id="${item.id}" aria-label="Increase quantity">+</button>
          </div>
          <button class="remove-btn text-red-500 hover:text-red-700 p-1 shrink-0" data-product-id="${item.id}" aria-label="Remove item">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
            </svg>
          </button>
        </div>
      `).join('');
      
      // Add event listeners to the new cart item buttons
      addCartItemEventListeners();
      
      // Update total
      const total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
      cartTotal.textContent = `$${total.toFixed(2)}`;
      
      // Update shipping information based on order total
      updateShippingInfo(total);
      
      // Enable/disable checkout button
      checkoutBtn.disabled = cart.length === 0;
      
      // Update cart count badge if it exists
      updateCartBadge();
    }

    // Update shipping information based on order total
    function updateShippingInfo(orderTotal: number) {
      const standardShippingText = document.getElementById('standard-shipping-text');
      if (standardShippingText) {
        if (orderTotal >= 75) {
          standardShippingText.textContent = 'Standard Shipping: FREE (3-7 business days)';
          standardShippingText.className = 'text-green-600 font-medium';
        } else {
          standardShippingText.textContent = `Standard Shipping: $5.00 (3-7 business days) - Add $${(75 - orderTotal).toFixed(2)} more for free shipping!`;
          standardShippingText.className = 'text-muted-foreground';
        }
      }
    }

    // Add event listeners to cart item buttons
    function addCartItemEventListeners() {
      // Quantity decrease buttons
      document.querySelectorAll('.quantity-btn-decrease').forEach(button => {
        button.addEventListener('click', (e) => {
          const productId = (e.currentTarget as HTMLElement).getAttribute('data-product-id');
          if (productId) {
            updateQuantity(productId, -1);
          }
        });
      });
      
      // Quantity increase buttons
      document.querySelectorAll('.quantity-btn-increase').forEach(button => {
        button.addEventListener('click', (e) => {
          const productId = (e.currentTarget as HTMLElement).getAttribute('data-product-id');
          if (productId) {
            updateQuantity(productId, 1);
          }
        });
      });
      
      // Remove buttons
      document.querySelectorAll('.remove-btn').forEach(button => {
        button.addEventListener('click', (e) => {
          const productId = (e.currentTarget as HTMLElement).getAttribute('data-product-id');
          if (productId) {
            removeFromCart(productId);
          }
        });
      });
    }
    
    function updateQuantity(productId: string, change: number) {
      const item = cart.find(item => item.id === productId);
      if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
          cart = cart.filter(item => item.id !== productId);
        }
        updateCart();
        saveCart(cart);
      }
    }
    
    function removeFromCart(productId: string) {
      cart = cart.filter(item => item.id !== productId);
      updateCart();
      saveCart(cart);
      showNotification('Item removed from cart', 'info');
    }

    function openCart() {
      if (!cartSidebar) return;
      cartSidebar.classList.remove('translate-x-full');
    }

    function closeCartSidebar() {
      if (!cartSidebar) return;
      cartSidebar.classList.add('translate-x-full');
    }
    

    
    function updateCartBadge() {
      const badge = document.querySelector('.cart-badge');
      if (badge) {
        const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
        badge.textContent = totalItems.toString();
        badge.classList.toggle('hidden', totalItems === 0);
      }
    }

    // Event listeners
    if (closeCart) {
      closeCart.addEventListener('click', closeCartSidebar);
    }

    // Listen for cart open event from header
    window.addEventListener('openCart', () => {
      console.log('üõí Header cart button clicked, opening cart...');
      openCart();
    });

    // Debug: Log initial state
    console.log('üõí Cart script loaded');
    console.log('üõí Initial cart state:', cart);
    console.log('üõí Cart elements found:', {
      cartSidebar: !!cartSidebar,
      cartOverlay: !!cartOverlay,
      cartItems: !!cartItems,
      cartTotal: !!cartTotal,
      checkoutBtn: !!checkoutBtn
    });

    // Checkout functionality (Stripe integration)
    if (checkoutBtn) {
      checkoutBtn.addEventListener('click', async () => {
        if (cart.length === 0) return;
        
        try {
          // Show loading state
          checkoutBtn.disabled = true;
          checkoutBtn.innerHTML = `
            <svg class="animate-spin -ml-1 mr-3 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Creating Checkout...
          `;
          
          // Prepare items for Stripe checkout
          const checkoutItems = cart.map(item => ({
            price: item.priceId, // Use Stripe price ID
            quantity: item.quantity
          }));

          console.log('üõí Creating checkout session for:', checkoutItems);
          
          // Get current page URL for redirect after payment
          const currentPageUrl = window.location.href;
          console.log('üåê Current page URL for redirect:', currentPageUrl);
          
          // Calculate order total for shipping calculation
          const orderTotal = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
          console.log('üí∞ Order total for shipping:', orderTotal);
          
          // Create checkout session
          const response = await fetch('/api/stripe/checkout', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              items: checkoutItems,
              currentPageUrl: currentPageUrl,
              orderTotal: orderTotal
            })
          });

          console.log('üõí Checkout response status:', response.status);
          console.log('üõí Checkout response headers:', response.headers);

          if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Checkout API error response:', errorText);
            throw new Error(`HTTP error! status: ${response.status}, response: ${errorText}`);
          }

          const data = await response.json();
          
          if (data.success && data.url) {
            console.log('‚úÖ Redirecting to Stripe checkout...');
            showNotification('Redirecting to checkout...', 'success');
            
            // Don't clear cart yet - only clear after successful payment
            // The cart will be cleared when user returns with success=true
            closeCartSidebar();
            
            // Redirect to Stripe checkout
            window.location.href = data.url;
          } else {
            throw new Error(data.error || 'Checkout failed');
          }
          
        } catch (error) {
          console.error('‚ùå Checkout error:', error);
          showNotification(`Checkout failed: ${error instanceof Error ? error.message : 'Unknown error'}`, 'error');
        } finally {
          // Reset checkout button
          checkoutBtn.disabled = false;
          checkoutBtn.innerHTML = 'Proceed to Checkout';
        }
      });
    }

    // Notification system
    function showNotification(message: string, type: 'success' | 'error' | 'info' = 'info') {
      // Remove existing notifications
      const existing = document.querySelector('.notification');
      if (existing) existing.remove();
      
      const notification = document.createElement('div');
      notification.className = `notification fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm transform transition-all duration-300 ${
        type === 'success' ? 'bg-green-500 text-white' :
        type === 'error' ? 'bg-red-500 text-white' :
        'bg-blue-500 text-white'
      }`;
      
      notification.innerHTML = `
        <div class="flex items-center gap-2">
          <span>${message}</span>
          <button onclick="this.parentElement.parentElement.remove()" class="ml-auto text-white hover:text-gray-200">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
            </svg>
          </button>
        </div>
      `;
      
      document.body.appendChild(notification);
      
      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 5000);
    }

    // Filter functionality
    const filterButtons = document.querySelectorAll<HTMLButtonElement>('.category-filter');
    const productItems = document.querySelectorAll<HTMLElement>('.product-item');

    function setActiveButton(active: HTMLButtonElement) {
      filterButtons.forEach(btn => btn.removeAttribute('data-active'));
      active.setAttribute('data-active', 'true');
    }

    function applyFilter(category: string) {
      productItems.forEach(item => {
        const isMatch = category === 'All' || item.getAttribute('data-category') === category;
        item.classList.toggle('hidden', !isMatch);
      });
      // Persist selection in URL hash (match Blog/Art)
      history.replaceState(null, '', `#${encodeURIComponent(category)}`);
    }

    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const category = button.getAttribute('data-category');
        if (!category) return;
        setActiveButton(button);
        applyFilter(category);
      });
    });

    // Initialize from URL hash if present (match Blog/Art)
    const initial = decodeURIComponent((location.hash?.replace('#','') || 'All'));
    const initialButton = Array.from(filterButtons).find(btn => btn.getAttribute('data-category') === initial)
      || Array.from(filterButtons).find(btn => btn.getAttribute('data-category') === 'All');
    if (initialButton) {
      setActiveButton(initialButton);
      applyFilter(initial);
    }

    // Initialize product data for cart after page loads
    setTimeout(() => {
      updateProductData();
      // Also update cart badge on page load
      updateCartBadge();
      
      // Check for success/failure messages from Stripe redirect
      checkStripeRedirect();
      
      // Set up size toggle functionality
      setupSizeToggles();
    }, 100);

    // Check for Stripe redirect messages
    function checkStripeRedirect() {
      const urlParams = new URLSearchParams(window.location.search);
      const success = urlParams.get('success');
      const canceled = urlParams.get('canceled');
      
      if (success === 'true') {
        showNotification('Payment successful! Thank you for your purchase.', 'success');
        // Clear cart after successful payment
        cart = [];
        saveCart(cart);
        updateCart();
        // Clean up URL
        window.history.replaceState({}, document.title, window.location.pathname);
      } else if (canceled === 'true') {
        showNotification('Payment was canceled. Your cart items are still available.', 'info');
        // Clean up URL
        window.history.replaceState({}, document.title, window.location.pathname);
      }
    }

    // Better approach: Use MutationObserver to watch for when products are rendered
    function waitForProducts() {
      const productGrid = document.querySelector('.grid');
      if (!productGrid) {
        console.log('üõçÔ∏è Product grid not found, waiting...');
        setTimeout(waitForProducts, 100);
        return;
      }

      // Check if products are already rendered
      const productElements = productGrid.querySelectorAll('.product-item');
      if (productElements.length > 0) {
        console.log(`üõçÔ∏è Found ${productElements.length} products, setting up cart...`);
        updateProductData();
        updateCartBadge();
      } else {
        // Wait a bit more for products to render
        console.log('üõçÔ∏è Products not yet rendered, waiting...');
        setTimeout(waitForProducts, 200);
      }
    }

    // Size toggle functionality
    function setupSizeToggles() {
      const sizeButtons = document.querySelectorAll('.size-btn');
      
      sizeButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          // Prevent this from bubbling up to cart handlers
          e.preventDefault();
          e.stopPropagation();
          
          const target = e.currentTarget as HTMLElement;
          const productId = target.getAttribute('data-target-product');
          const size = target.getAttribute('data-size');
          const price = target.getAttribute('data-price');
          
          if (!productId || !size || !price) return;
          
          console.log(`üéØ Size button clicked: ${size} for product ${productId} at price $${price}`);
          
          // Update button styles for this product only
          sizeButtons.forEach(btn => {
            if (btn.getAttribute('data-target-product') === productId) {
              btn.classList.remove('bg-primary', 'text-white', 'border-primary');
              btn.classList.add('border-input', 'bg-background', 'text-white');
            }
          });
          
          target.classList.remove('border-input', 'bg-background', 'text-foreground');
          target.classList.add('bg-primary', 'text-white', 'border-primary');
          
          // Update price display
          const priceElement = document.querySelector(`[data-product-id="${productId}"] .text-primary`);
          if (priceElement) {
            priceElement.textContent = `$${price}`;
            console.log(`üí∞ Updated price for ${productId} to $${price}`);
          } else {
            console.log(`‚ùå Could not find price element for ${productId}`);
          }
          
          // Update product data for cart
          if (productData[productId]) {
            productData[productId].price = parseFloat(price);
          }
        });
      });
    }
    
    // Start watching for products
    waitForProducts();
  </script>
</BaseLayout>
